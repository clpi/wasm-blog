# You must change these to your own details.
[package]
name = "rust-webpack-template"
description = "My super awesome Rust, WebAssembly, and Webpack project!"
version = "0.1.0"
authors = ["You <you@example.com>"]
categories = ["wasm"]
readme = "README.md"
edition = "2018"

[lib]
crate-type = ["cdylib"]

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true

[features]
# If you uncomment this line, it will enable `wee_alloc`:
#default = ["wee_alloc"]

[dependencies]
# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = {version="0.2.45", features=["serde-serialize"]}
js-sys = "*"
rayon-core="*"
rayon="*"
reqwest="*"
chrono="*"
#gloo="*"
#nalgebra = "*"

wasm-bindgen-futures = "*"
nalgebra = { version = "0.20", default-features = false, features = [ "alloc" ] }
ndarray="*"
ndarray-rand="*"
serde = { version = "*", features= ["derive"] }
serde_json = "*"
#nom="*"
#rand="*"
rand = { version = "0.7.3", features = ["wasm-bindgen"] }
rand_core="*"
#futures="0.3"
futures-channel-preview = { version="0.3.0-alpha.18" }
console_log="*"
nom={ version="*", features=["regexp"] }
futures="*"
#pulldown-cmark
comrak="*"
crossbeam-channel="*"
url="*"
pest="*"

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator, so it's not enabled by default.
wee_alloc = { version = "0.4.2", optional = true }

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
version = "0.3.22"
features = ["Performance", "css", "CharacterData", "PerformanceTiming", "console", "Document", "Window", "Element", "EventListener", "CanvasRenderingContext2d", "HtmlSlotElement", "DocumentFragment", "HtmlTemplateElement","CustomElementRegistry", "ShadowRoot", "ShadowRootInit", "ShadowRootMode", "Blob", "Event", "EventTarget", "FocusEvent", "KeyboardEvent", "DragEvent", "InputEvent", "File", "FileReader", "HtmlButtonElement", "HtmlInputElement", "HtmlSelectElement", "HtmlTextAreaElement", "Location", "MessageEvent", "MouseEvent", "Request", "Storage", "Text", "RequestCache", "RequestCredentials", "UiEvent", "Url", "WebSocket", "Worker", "WorkerOptions","FileList", "Headers", "PointerEvent", "Node", "ObserverCallback",
"ConvolverNode", "AddEventListenerOptions", 
"ProgressEvent", "Headers", "History", "HtmlLinkElement", "PopStateEvent", "ElementCreationOptions", "HtmlDivElement", "HtmlImageElement", "HtmlLiElement", "HtmlUListElement", "HtmlScriptElement", "HtmlParagraphElement", "HtmlStyleElement", "HtmlSourceElement", "HttpConnectionElement", "Request",   "Response", "DomTokenList", "DomStringMap",   "CssStyleDeclaration", "NodeList", "ImageData", "ImageBitmap", "MouseScrollEvent", "MutationEvent", "NodeIterator",
"Notification", "NotificationEvent", "PageTransitionEvent", "PageTransitionEventInit", "StorageEvent", "StyleSheet","TransitionEvent", "XmlHttpRequest", "HtmlCanvasElement", "ScrollToOptions"]

#[dependencies.js-sys]
#version = "*"
#features = ["console", "Document", "Window", "Element", "EventListener", "CanvasRenderingContext2d",
#"HtmlCanvasElement", "Event", "EventTarget", "FocusEvent", "KeyboardEvent" ]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# in debug mode.
[target."cfg(debug_assertions)".dependencies]
console_error_panic_hook = "0.1.5"

# These crates are used for running unit tests.
[dev-dependencies]
wasm-bindgen-test = "0.2.45"
js-sys = "0.3.22"
wasm-bindgen-futures = "0.3.22"
